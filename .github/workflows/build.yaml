# This is a basic workflow to help you get started with Actions

name: CI_BUILD

# Controls when the action will run. Triggers the workflow on push
# events but only for the master branch
on:
  push:
    # only trigger on branches, not on tags
    branches: '**'
    paths-ignore:
      - 'docs/**'
  workflow_dispatch:
    inputs:
      UseLastRepositoryBuild:
        description: 'Use latest NuGet packages from JNet'
        required: true
        default: false
        type: boolean
      ForceContinueOnError:
        description: 'Force continue-on-error'
        required: false
        default: true
        type: boolean
      EnableProcessDump:
        description: 'Enable .NET process dump'
        required: false
        default: '0'
        type: choice
        options:
          - "0"
          - "1"

concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

env:
  MAVEN_RELEASE: 3.9.11

# This workflow contains two jobs called "check_changes", "build_windows"
jobs:
  # Verify if a build is needed
  check_changes:
    name: Check changed files
    outputs:
      run_build_windows: ${{ steps.check_files.outputs.run_build_windows || steps.force_execute.outputs.run_build_windows }}
    runs-on: ubuntu-latest
    steps:
      - name: Force check on true
        id: force_execute
        if: ${{ github.event_name != 'push' }}
        run: echo "run_build_windows=true" >> $GITHUB_OUTPUT
      - name: Create modified file list
        if: ${{ github.event_name == 'push' }}
        id: get_changed_files
        uses: masesgroup/retrieve-changed-files@v3
        with:
          format: 'csv'
      - name: Check modified file list
        if: ${{ github.event_name == 'push' }}
        id: check_files
        run: |
          mapfile -d ',' -t added_modified_files < <(printf '%s,' '${{ steps.get_changed_files.outputs.added_modified }}')
          for added_modified_file in "${added_modified_files[@]}"; do
              if [[ $added_modified_file == ".github/workflows/build.yaml"* ]]; then
                echo "$added_modified_file is myself."
                echo "run_build_windows=true" >> $GITHUB_OUTPUT
                break
              fi
              if [[ $added_modified_file == "src/container/"* ]]; then
                echo "$added_modified_file file is under the directory 'src/'."
                echo "run_build_windows=true" >> $GITHUB_OUTPUT
                break
              fi
              if [[ $added_modified_file == "src/jvm/"* ]]; then
                echo "$added_modified_file file is under the directory 'src/'."
                echo "run_build_windows=true" >> $GITHUB_OUTPUT
                break
              fi
              if [[ $added_modified_file == "src/net/"* ]]; then
                echo "$added_modified_file file is under the directory 'src/'."
                echo "run_build_windows=true" >> $GITHUB_OUTPUT
                break
              fi
              if [[ $added_modified_file == "tests/"* ]]; then
                echo "$added_modified_file file is under the directory 'src/'."
                echo "run_build_windows=true" >> $GITHUB_OUTPUT
                break
              fi
          done
      - name: Get run_build_windows
        run: echo "The selected run_build_windows is ${{ steps.check_files.outputs.run_build_windows }}"

  # Now run "build_windows"
  build_windows:
    needs: check_changes
    if: "always() && needs.check_changes.outputs.run_build_windows == 'true'"
    # The type of runner that the job will run on
    runs-on: windows-2022

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:   
      # Runs a set of commands using the runners shell
      # Support longpaths
      - name: Support long paths
        run: git config --system core.longpaths true
      
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v5
        with:
          fetch-depth: '1'
          submodules: 'true'

      - uses: actions/cache/restore@v4
        id: cache
        with:
          lookup-only: true
          enableCrossOsArchive: true
          path: ./jars/
          key: Apache_Maven_${{ env.MAVEN_RELEASE }}

      - name: Download apache-maven-${{ env.MAVEN_RELEASE }}-bin
        if: steps.cache.outputs.cache-hit != 'true'
        run: C:\msys64\usr\bin\wget.exe https://dlcdn.apache.org/maven/maven-3/${{ env.MAVEN_RELEASE }}/binaries/apache-maven-${{ env.MAVEN_RELEASE }}-bin.zip

      - name: Expand apache-maven-${{ env.MAVEN_RELEASE }}-bin
        if: steps.cache.outputs.cache-hit != 'true'
        run: Expand-Archive -LiteralPath '.\apache-maven-${{ env.MAVEN_RELEASE }}-bin.zip' -DestinationPath .\ -Force
    
      - name: Rename apache-maven-${{ env.MAVEN_RELEASE }}-bin
        if: steps.cache.outputs.cache-hit != 'true'
        run: Rename-Item -path ".\apache-maven-${{ env.MAVEN_RELEASE }}" -NewName "jars"

      - name: Upload artifacts
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          enableCrossOsArchive: true
          key: Apache_Maven_${{ env.MAVEN_RELEASE }}
          path: ./jars/

      - uses: actions/cache/restore@v4
        if: steps.cache.outputs.cache-hit == 'true'
        with:
          enableCrossOsArchive: true
          path: ./jars/
          key: Apache_Maven_${{ env.MAVEN_RELEASE }}

      - name: Get last workflow run of JNet
        if: ${{ inputs.UseLastRepositoryBuild == true }}
        shell: bash
        run: echo "JNET_LAST_RUN=$(curl -sL https://api.github.com/repos/masesgroup/JNet/actions/workflows/build.yaml/runs | jq -r '.workflow_runs[0].id?')" >> $GITHUB_ENV

      - name: Download artifact
        if: ${{ inputs.UseLastRepositoryBuild == true }}
        run: gh run download ${{ env.JNET_LAST_RUN }} --name JNetNuGet --repo masesgroup/JNet --dir JNetNuGet
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: List NuGet packages downloaded
        if: ${{ inputs.UseLastRepositoryBuild == true }}
        shell: cmd
        run: dir .\JNetNuGet\*nupkg

      - name: Add local repo
        if: ${{ success() && inputs.UseLastRepositoryBuild == true }}
        run: dotnet nuget add source --name local "${{ github.workspace }}\JNetNuGet\"

      - name: Pre compile
        run: dotnet build --no-incremental --configuration Release /p:Platform="Any CPU" /p:NoWarn="0108%3B1030%3B0618" src\net\Naven\Naven.csproj
        env:
          GITHUB_SIMPLIFIED_GENERATION: true

      - name: Set up Apache Maven Central
        uses: actions/setup-java@v4
        with: # running setup-java again overwrites the settings.xml
          distribution: temurin
          java-version: 11
          cache: 'maven'
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: MAVEN_USERNAME # env variable for username in deploy
          server-password: MAVEN_CENTRAL_TOKEN # env variable for token in deploy
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: MAVEN_GPG_PASSPHRASE # env variable for GPG private key passphrase

      - name: Create Jars
        run: mvn  "-DmavenSkipMain=true" --file ./src/jvm/naven/pom.xml --no-transfer-progress package
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}

      - name: Compile command line
        run: dotnet build --no-incremental --configuration Release /p:Platform="Any CPU" /p:NoWarn="0108%3B1030%3B0618" src\net\NavenCLI\NavenCLI.csproj

      - name: Compile NavenPS
        run: dotnet build --no-incremental --configuration Release /p:Platform="Any CPU" /p:NoWarn="0108%3B1030%3B0618" src\net\NavenPS\NavenPS.csproj

      - uses: nuget/setup-nuget@v2.0.1
        with:
          nuget-version: '5.x'
          
      - run: nuget pack src\net\NavenCLI\NavenCLI.nuspec -OutputDirectory .\bin

      - name: Recompile to create nuget packages
        run: dotnet build --no-incremental --configuration Release /p:Platform="Any CPU" /p:NoWarn="0108%3B1030%3B0618" src\net\Naven.sln
          
      - name: Prepare PowerShell package
        run: |
          Copy-Item .\src\net\NavenPS\MASES.NavenPS.psd1 -Destination .\MASES.NavenPS\MASES.NavenPS.psd1 -Force
          Copy-Item .\src\net\NavenPS\MASES.NavenPS.psm1 -Destination .\MASES.NavenPS\MASES.NavenPS.psm1 -Force
        shell: pwsh
    
      - name: Create PowerShell package
        run: |
          $env:DOTNET_CLI_UI_LANGUAGE="en_US"
          Register-PSRepository -Name Local_Nuget_Feed -SourceLocation $env:GITHUB_WORKSPACE\bin -PublishLocation $env:GITHUB_WORKSPACE\bin -InstallationPolicy Trusted
          Publish-Module -Path .\MASES.NavenPS -Repository Local_Nuget_Feed -NuGetApiKey 'ABC123'
        shell: pwsh

      - name: List NuGet packages to avoid download of artifact
        shell: cmd
        run: dir .\bin\*nupkg

      - uses: actions/upload-artifact@v4
        with:
          name: NavenNuGet
          path: .\bin\*nupkg

      - name: Save Naven bin in cache
        uses: actions/cache/save@v4
        with:
          enableCrossOsArchive: true
          path: |
              ./bin/
              ./jars/
          key: Naven_${{ github.run_number }}_${{ github.run_attempt }}_bin_${{ github.sha }}
          
      - uses: actions/upload-artifact@v4
        with:
          if-no-files-found: ignore
          name: NavenBin
          path: .\bin\

  build_container_naven:
    needs: check_changes
    if: "always() && needs.check_changes.outputs.run_build_windows == 'true'"
    runs-on: ubuntu-latest
    outputs:
      GITHUB_REF_NAME_FOR_DOCKER: ${{ env.GITHUB_REF_NAME_FOR_DOCKER }}
    permissions:
      id-token: write
      packages: write
      contents: read
      attestations: write
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:    
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v5
        with:
          fetch-depth: '1'
          submodules: 'true'

      - uses: actions/cache/restore@v4
        id: cache
        with:
          lookup-only: true
          enableCrossOsArchive: true
          path: ./jars/
          key: Apache_Maven_${{ env.MAVEN_RELEASE }}

      - name: Download apache-maven-${{ env.MAVEN_RELEASE }}-bin
        if: steps.cache.outputs.cache-hit != 'true'
        run: wget https://dlcdn.apache.org/maven/maven-3/${{ env.MAVEN_RELEASE }}/binaries/apache-maven-${{ env.MAVEN_RELEASE }}-bin.zip

      - name: Expand apache-maven-${{ env.MAVEN_RELEASE }}-bin
        if: steps.cache.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          Expand-Archive -LiteralPath '.\apache-maven-${{ env.MAVEN_RELEASE }}-bin.zip' -DestinationPath .\ -Force
    
      - name: Rename apache-maven-${{ env.MAVEN_RELEASE }}-bin
        if: steps.cache.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          Rename-Item -path ".\apache-maven-${{ env.MAVEN_RELEASE }}" -NewName "jars"

      - name: Upload artifacts
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          enableCrossOsArchive: true
          key: Apache_Maven_${{ env.MAVEN_RELEASE }}
          path: ./jars/

      - uses: actions/cache/restore@v4
        if: steps.cache.outputs.cache-hit == 'true'
        with:
          enableCrossOsArchive: true
          path: ./jars/
          key: Apache_Maven_${{ env.MAVEN_RELEASE }}

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            9.x

      - name: Pre compile
        run: dotnet build --no-incremental --configuration Release /p:Platform="Any CPU" /p:NoWarn="0108%3B1030%3B0618" src/net/Naven/Naven.csproj
        env:
          GITHUB_SIMPLIFIED_GENERATION: true
          
      - name: Set up Apache Maven Central
        uses: actions/setup-java@v4
        with: # running setup-java again overwrites the settings.xml
          distribution: temurin
          java-version: 11
          cache: 'maven'
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: MAVEN_USERNAME # env variable for username in deploy
          server-password: MAVEN_CENTRAL_TOKEN # env variable for token in deploy
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: MAVEN_GPG_PASSPHRASE # env variable for GPG private key passphrase

      - name: Create Jars
        run: mvn  "-DmavenSkipMain=true" --file ./src/jvm/naven/pom.xml --no-transfer-progress package
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
        
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository_owner }}/naven

      - name: Build and push
        id: push
        uses: docker/build-push-action@v6
        with:
          file: ./src/container/Dockerfile.linux
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          provenance: true
          sbom: true

      - name: Attest GitHub
        uses: actions/attest-build-provenance@v2
        id: attest
        with:
          subject-name: ghcr.io/${{ github.repository_owner }}/naven
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  execute_tests:
    needs: build_windows
    strategy:
      fail-fast: false
      matrix:
        os: [ 'ubuntu-latest', 'windows-latest', 'macos-latest' ] # , 'macos-13' ] disable due to https://github.com/masesgroup/JNet/issues/518#issuecomment-2547271924
        jdk_vendor: [ 'temurin', 'zulu', 'microsoft', 'corretto', 'oracle', 'graalvm' ]
        jdk_version: [ '11', '17', '21' ] # only LTS versions
        exclude:
          - jdk_vendor: oracle
            jdk_version: 11
          - jdk_vendor: graalvm
            jdk_version: 11
        
    runs-on: ${{ matrix.os }}
    env:
      DOTNET_DbgEnableMiniDump: ${{ inputs.EnableProcessDump }}
      DOTNET_DbgMiniDumpType: 3
      DOTNET_DbgMiniDumpName: ${{ github.workspace }}/coredump.%p
      DOTNET_CreateDumpDiagnostics: ${{ inputs.EnableProcessDump }}
      DOTNET_CreateDumpVerboseDiagnostics: ${{ inputs.EnableProcessDump }}
      DOTNET_EnableCrashReport: ${{ inputs.EnableProcessDump }}
      JCOBRIDGE_LicensePath: ${{ secrets.JCOBRIDGE_ENCODED_2_6_1 }}
    
    steps:
      # Runs a set of commands using the runners shell
      # Support longpaths
      - name: Support long paths
        if: ${{ matrix.os == 'windows-latest' }}
        run: git config --system core.longpaths true
      
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v5
        with:
          fetch-depth: '1'
          submodules: 'true'

      - name: Restore Naven bin from cache
        uses: actions/cache/restore@v4
        with:
          fail-on-cache-miss: true
          enableCrossOsArchive: true
          path: |
              ./bin/
              ./jars/
          key: Naven_${{ github.run_number }}_${{ github.run_attempt }}_bin_${{ github.sha }}

      - run: Get-ChildItem -Recurse -Path ${{ github.workspace }}\bin,${{ github.workspace }}\jars
        shell: pwsh

      - uses: actions/setup-dotnet@v4
        if: ${{ matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest' || matrix.os == 'macos-13' }}
        with:
          dotnet-version: |
            6.x
            9.x

      - name: Download Procdump and prepare
        if: ${{ matrix.os == 'windows-latest' && inputs.EnableProcessDump == 1 }} # see https://gist.github.com/Sedeniono/e6d6504e3bf0645937852ee5681ef9ee and https://learn.microsoft.com/it-it/sysinternals/downloads/procdump
        continue-on-error: true
        run: |
          C:\msys64\usr\bin\wget.exe https://download.sysinternals.com/files/Procdump.zip
          Expand-Archive -LiteralPath '${{ github.workspace }}\Procdump.zip' -DestinationPath ${{ github.workspace }}\Procdump -Force
          dir .\Procdump
          ${{ github.workspace }}\Procdump\procdump.exe -accepteula
          mkdir CrashDumpsDir
          ${{ github.workspace }}\Procdump\procdump.exe -ma -i ${{ github.workspace }}\CrashDumpsDir

      - name: Set up JDK distribution
        if: ${{ matrix.jdk_vendor != 'graalvm' }}
        uses: actions/setup-java@v4
        with: # running setup-java again overwrites the settings.xml
          distribution: ${{ matrix.jdk_vendor }}
          java-version: ${{ matrix.jdk_version }}

      - name: Set up GraalVM distribution
        if: ${{ matrix.jdk_vendor == 'graalvm' }}
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '${{ matrix.jdk_version }}' # See 'Options' for more details
          distribution: 'graalvm' # See 'Supported distributions' for available options
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - if: ${{ matrix.os != 'windows-latest' }} # for windows see https://github.com/masesgroup/JNet/issues/573#issuecomment-2550033900
        run: dotnet nuget add source ${{ github.workspace }}/bin -n MyLocalRepo

      - if: ${{ matrix.os == 'windows-latest' }} # for windows see https://github.com/masesgroup/JNet/issues/573#issuecomment-2550033900
        run: dotnet nuget add source ${{ github.workspace }}\bin -n MyLocalRepo

      - run: dotnet tool update -g MASES.NavenCLI 

      - if: ${{ matrix.os != 'windows-latest' }} # for windows see https://github.com/masesgroup/JNet/issues/573#issuecomment-2550033900
        continue-on-error: ${{ inputs.ForceContinueOnError == true }}
        run: |
          naven --no-transfer-progress -f ${{ github.workspace }}/src/jvm/naven/pom.xml package

      - name: Disable CET for dotnet process
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          reg add "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\naven.exe" /v MitigationOptions /t REG_BINARY /d "0000000000000000000000000000002000" /f
          Get-ProcessMitigation -Name "naven.exe"

      - if: ${{ matrix.os == 'windows-latest' }} # for windows see https://github.com/masesgroup/JNet/issues/573#issuecomment-2550033900
        continue-on-error: ${{ inputs.ForceContinueOnError == true }}
        run: |
          naven --no-transfer-progress -f ${{ github.workspace }}\src\jvm\naven\pom.xml package
          
      - if: ${{ matrix.os == 'windows-latest' }}
        run: (Get-EventLog -LogName Application -Newest 5).Message

      - uses: actions/upload-artifact@v4
        if: ${{ matrix.os == 'windows-latest' }}
        with:
          if-no-files-found: ignore
          name: Crash_tests_${{ matrix.os }}_${{ matrix.jdk_vendor }}_${{ matrix.jdk_version }}
          path: .\CrashDumpsDir\*
          retention-days: 7

      - uses: actions/upload-artifact@v4
        if: ${{ matrix.os != 'windows-latest' }}
        with:
          if-no-files-found: ignore
          name: Crash_tests_${{ matrix.os }}_${{ matrix.jdk_vendor }}_${{ matrix.jdk_version }}
          path: ${{ github.workspace }}/coredump.*
          retention-days: 7

      - uses: actions/upload-artifact@v4
        with:
          if-no-files-found: ignore
          name: Crash_tests_hs_err__${{ matrix.os }}_${{ matrix.jdk_vendor }}_${{ matrix.jdk_version }}
          path: ${{ github.workspace }}/**/hs_err_*
          retention-days: 7

  execute_tests_powershell:
    needs: build_windows
    strategy:
      fail-fast: false
      matrix:
        os: [ 'ubuntu-latest', 'windows-latest', 'macos-latest' ] # , 'macos-13' ] disable due to https://github.com/masesgroup/JNet/issues/518#issuecomment-2547271924
        jdk_vendor: [ 'temurin', 'zulu', 'microsoft', 'corretto', 'oracle', 'graalvm' ]
        jdk_version: [ '11', '17', '21' ] # only LTS versions
        exclude:
          - jdk_vendor: oracle
            jdk_version: 11
          - jdk_vendor: graalvm
            jdk_version: 11
            
    runs-on: ${{ matrix.os }}
    env:
      DOTNET_CLI_UI_LANGUAGE: en_US
      DOTNET_DbgEnableMiniDump: ${{ inputs.EnableProcessDump }}
      DOTNET_DbgMiniDumpType: 3
      DOTNET_DbgMiniDumpName: ${{ github.workspace }}/coredump.%p
      DOTNET_CreateDumpDiagnostics: ${{ inputs.EnableProcessDump }}
      DOTNET_CreateDumpVerboseDiagnostics: ${{ inputs.EnableProcessDump }}
      DOTNET_EnableCrashReport: ${{ inputs.EnableProcessDump }}
      JCOBRIDGE_LicensePath: ${{ secrets.JCOBRIDGE_ENCODED_2_6_1 }}

    steps:
      # Runs a set of commands using the runners shell
      # Support longpaths
      - name: Support long paths
        if: ${{ matrix.os == 'windows-latest' }}
        run: git config --system core.longpaths true
      
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v5
        with:
          fetch-depth: '1'
          submodules: 'true'

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            6.x
            9.x

      - name: Download Procdump and prepare
        if: ${{ matrix.os == 'windows-latest' && inputs.EnableProcessDump == 1 }} # see https://gist.github.com/Sedeniono/e6d6504e3bf0645937852ee5681ef9ee and https://learn.microsoft.com/it-it/sysinternals/downloads/procdump
        continue-on-error: true
        run: |
          C:\msys64\usr\bin\wget.exe https://download.sysinternals.com/files/Procdump.zip
          Expand-Archive -LiteralPath '${{ github.workspace }}\Procdump.zip' -DestinationPath ${{ github.workspace }}\Procdump -Force
          dir .\Procdump
          ${{ github.workspace }}\Procdump\procdump.exe -accepteula
          mkdir CrashDumpsDir
          ${{ github.workspace }}\Procdump\procdump.exe -ma -i ${{ github.workspace }}\CrashDumpsDir

      - name: Restore Naven bin from cache
        uses: actions/cache/restore@v4
        with:
          fail-on-cache-miss: true
          enableCrossOsArchive: true
          path: |
              ./bin/
              ./jars/
          key: Naven_${{ github.run_number }}_${{ github.run_attempt }}_bin_${{ github.sha }}

      - run: Get-ChildItem -Recurse -Path ${{ github.workspace }}\bin,${{ github.workspace }}\jars
        shell: pwsh
 
      - name: Set up JDK distribution
        if: ${{ matrix.jdk_vendor != 'graalvm' }}
        uses: actions/setup-java@v4
        with: # running setup-java again overwrites the settings.xml
          distribution: ${{ matrix.jdk_vendor }}
          java-version: ${{ matrix.jdk_version }}

      - name: Set up GraalVM distribution
        if: ${{ matrix.jdk_vendor == 'graalvm' }}
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '${{ matrix.jdk_version }}' # See 'Options' for more details
          distribution: 'graalvm' # See 'Supported distributions' for available options
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - shell: pwsh
        run: Register-PSRepository -Name Local_Nuget_Feed -SourceLocation $env:GITHUB_WORKSPACE\bin -PublishLocation $env:GITHUB_WORKSPACE\bin -InstallationPolicy Trusted

      - if: ${{ matrix.os != 'windows-latest' }}
        continue-on-error: ${{ inputs.ForceContinueOnError == true }}
        shell: pwsh
        run: |
          Install-Module MASES.NavenPS -Repository Local_Nuget_Feed
          ${{ github.workspace }}/tests/scripts/NavenPSTest.ps1 -Verbose -f ${{ github.workspace }}/src/jvm/naven/pom.xml --no-transfer-progress package

      - if: ${{ matrix.os == 'windows-latest' }}
        continue-on-error: ${{ inputs.ForceContinueOnError == true }}
        shell: pwsh
        run: |
          Install-Module MASES.NavenPS -Repository Local_Nuget_Feed
          ${{ github.workspace }}\tests\scripts\NavenPSTest.ps1 -Verbose -f ${{ github.workspace }}\src\jvm\naven\pom.xml --no-transfer-progress package

      - if: ${{ matrix.os == 'windows-latest' }}
        continue-on-error: ${{ inputs.ForceContinueOnError == true }}
        shell: powershell
        run: |
          Install-Module MASES.NavenPS -Repository Local_Nuget_Feed
          ${{ github.workspace }}\tests\scripts\NavenPSTest.ps1 -Verbose -f ${{ github.workspace }}\src\jvm\naven\pom.xml --no-transfer-progress package
          
      - if: ${{ matrix.os == 'windows-latest' }}
        run: (Get-EventLog -LogName Application -Newest 5).Message

      - uses: actions/upload-artifact@v4
        if: ${{ matrix.os == 'windows-latest' }}
        with:
          if-no-files-found: ignore
          name: Crash_powershell_${{ matrix.os }}_${{ matrix.jdk_vendor }}_${{ matrix.jdk_version }}
          path: .\CrashDumpsDir\*
          retention-days: 7

      - uses: actions/upload-artifact@v4
        if: ${{ matrix.os != 'windows-latest' }}
        with:
          if-no-files-found: ignore
          name: Crash_powershell_${{ matrix.os }}_${{ matrix.jdk_vendor }}_${{ matrix.jdk_version }}
          path: ${{ github.workspace }}/coredump.*
          retention-days: 7

      - uses: actions/upload-artifact@v4
        with:
          if-no-files-found: ignore
          name: Crash_powershell_hs_err_${{ matrix.os }}_${{ matrix.jdk_vendor }}_${{ matrix.jdk_version }}
          path: ${{ github.workspace }}/**/hs_err_*
          retention-days: 7

  final_cleanup:
    needs: [ execute_tests, execute_tests_powershell ]
    if: "always()"
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v5
        with:
          fetch-depth: '1'

      - name: Clear caches
        run: |
          gh extension install actions/gh-actions-cache
          echo "Fetching list of cache key"
          cacheKeysForPR=$(gh actions-cache list --key Naven_${{ github.run_number }}_${{ github.run_attempt }} | cut -f 1 )
          ## Setting this to not fail the workflow while deleting cache keys.
          set +e
          echo "Deleting caches..."
          for cacheKey in $cacheKeysForPR
          do
              gh actions-cache delete $cacheKey --confirm
          done
          echo "Done"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}