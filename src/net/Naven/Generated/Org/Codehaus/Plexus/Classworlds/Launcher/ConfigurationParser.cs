/*
*  Copyright 2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.12.0)
*  using plexus-classworlds-2.8.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Codehaus.Plexus.Classworlds.Launcher
{
    #region ConfigurationParser declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.codehaus.plexus/plexus-classworlds/2.8.0/org/codehaus/plexus/classworlds/launcher/ConfigurationParser.html"/>
    /// </summary>
    public partial class ConfigurationParser : MASES.JCOBridge.C2JBridge.JVMBridgeBase<ConfigurationParser>
    {
        const string _bridgeClassName = "org.codehaus.plexus.classworlds.launcher.ConfigurationParser";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public ConfigurationParser() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public ConfigurationParser(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region ConfigurationParser implementation
    public partial class ConfigurationParser
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.codehaus.plexus/plexus-classworlds/2.8.0/org/codehaus/plexus/classworlds/launcher/ConfigurationParser.html#%3Cinit%3E(org.codehaus.plexus.classworlds.launcher.ConfigurationHandler,java.util.Properties)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Codehaus.Plexus.Classworlds.Launcher.ConfigurationHandler"/></param>
        /// <param name="arg1"><see cref="Java.Util.Properties"/></param>
        public ConfigurationParser(Org.Codehaus.Plexus.Classworlds.Launcher.ConfigurationHandler arg0, Java.Util.Properties arg1)
            : base(arg0, arg1)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.codehaus.plexus/plexus-classworlds/2.8.0/org/codehaus/plexus/classworlds/launcher/ConfigurationParser.html#IMPORT_PREFIX"/>
        /// </summary>
        public static Java.Lang.String IMPORT_PREFIX { get { if (!_IMPORT_PREFIXReady) { _IMPORT_PREFIXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "IMPORT_PREFIX"); _IMPORT_PREFIXReady = true; } return _IMPORT_PREFIXContent; } }
        private static Java.Lang.String _IMPORT_PREFIXContent = default;
        private static bool _IMPORT_PREFIXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.codehaus.plexus/plexus-classworlds/2.8.0/org/codehaus/plexus/classworlds/launcher/ConfigurationParser.html#LOAD_PREFIX"/>
        /// </summary>
        public static Java.Lang.String LOAD_PREFIX { get { if (!_LOAD_PREFIXReady) { _LOAD_PREFIXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "LOAD_PREFIX"); _LOAD_PREFIXReady = true; } return _LOAD_PREFIXContent; } }
        private static Java.Lang.String _LOAD_PREFIXContent = default;
        private static bool _LOAD_PREFIXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.codehaus.plexus/plexus-classworlds/2.8.0/org/codehaus/plexus/classworlds/launcher/ConfigurationParser.html#MAIN_PREFIX"/>
        /// </summary>
        public static Java.Lang.String MAIN_PREFIX { get { if (!_MAIN_PREFIXReady) { _MAIN_PREFIXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MAIN_PREFIX"); _MAIN_PREFIXReady = true; } return _MAIN_PREFIXContent; } }
        private static Java.Lang.String _MAIN_PREFIXContent = default;
        private static bool _MAIN_PREFIXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.codehaus.plexus/plexus-classworlds/2.8.0/org/codehaus/plexus/classworlds/launcher/ConfigurationParser.html#OPTIONALLY_PREFIX"/>
        /// </summary>
        public static Java.Lang.String OPTIONALLY_PREFIX { get { if (!_OPTIONALLY_PREFIXReady) { _OPTIONALLY_PREFIXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "OPTIONALLY_PREFIX"); _OPTIONALLY_PREFIXReady = true; } return _OPTIONALLY_PREFIXContent; } }
        private static Java.Lang.String _OPTIONALLY_PREFIXContent = default;
        private static bool _OPTIONALLY_PREFIXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.codehaus.plexus/plexus-classworlds/2.8.0/org/codehaus/plexus/classworlds/launcher/ConfigurationParser.html#SET_PREFIX"/>
        /// </summary>
        public static Java.Lang.String SET_PREFIX { get { if (!_SET_PREFIXReady) { _SET_PREFIXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SET_PREFIX"); _SET_PREFIXReady = true; } return _SET_PREFIXContent; } }
        private static Java.Lang.String _SET_PREFIXContent = default;
        private static bool _SET_PREFIXReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.codehaus.plexus/plexus-classworlds/2.8.0/org/codehaus/plexus/classworlds/launcher/ConfigurationParser.html#parse(java.io.InputStream)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.InputStream"/></param>
        /// <exception cref="Java.Io.IOException"/>
        /// <exception cref="Org.Codehaus.Plexus.Classworlds.Launcher.ConfigurationException"/>
        /// <exception cref="Org.Codehaus.Plexus.Classworlds.Realm.DuplicateRealmException"/>
        /// <exception cref="Org.Codehaus.Plexus.Classworlds.Realm.NoSuchRealmException"/>
        public void Parse(Java.Io.InputStream arg0)
        {
            IExecute("parse", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}