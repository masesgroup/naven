/*
*  Copyright (c) 2024-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.4.0)
*  using plexus-classworlds-2.9.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Codehaus.Plexus.Classworlds.Launcher
{
    #region Launcher declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.codehaus.plexus/plexus-classworlds/2.8.0/org/codehaus/plexus/classworlds/launcher/Launcher.html"/>
    /// </summary>
    public partial class Launcher : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Launcher>, MASES.JCOBridge.C2JBridge.IJVMBridgeMain
    {
        const string _bridgeClassName = "org.codehaus.plexus.classworlds.launcher.Launcher";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public Launcher() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public Launcher(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public Launcher(params object[] args) : base(args) { }

        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region Launcher implementation
    public partial class Launcher
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.codehaus.plexus/plexus-classworlds/2.8.0/org/codehaus/plexus/classworlds/launcher/Launcher.html#mainWithExitCode(java.lang.String[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        /// <exception cref="Java.Lang.Exception"/>
        public static int MainWithExitCode(Java.Lang.String[] arg0)
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "mainWithExitCode", "([Ljava/lang/String;)I", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.codehaus.plexus/plexus-classworlds/2.8.0/org/codehaus/plexus/classworlds/launcher/Launcher.html#main(java.lang.String[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public static void Main(Java.Lang.String[] arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "main", "([Ljava/lang/String;)V", new object[] { arg0 });
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.codehaus.plexus/plexus-classworlds/2.8.0/org/codehaus/plexus/classworlds/launcher/Launcher.html#getExitCode()"/> 
        /// </summary>
        public int ExitCode
        {
            get { return IExecuteWithSignature<int>("getExitCode", "()I"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.codehaus.plexus/plexus-classworlds/2.8.0/org/codehaus/plexus/classworlds/launcher/Launcher.html#getMainClass()"/> 
        /// </summary>
        public Java.Lang.Class MainClass
        {
            get { return IExecute<Java.Lang.Class>("getMainClass"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.codehaus.plexus/plexus-classworlds/2.8.0/org/codehaus/plexus/classworlds/launcher/Launcher.html#getMainClassName()"/> 
        /// </summary>
        public Java.Lang.String MainClassName
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getMainClassName", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.codehaus.plexus/plexus-classworlds/2.8.0/org/codehaus/plexus/classworlds/launcher/Launcher.html#getMainRealm()"/> 
        /// </summary>
        public Org.Codehaus.Plexus.Classworlds.Realm.ClassRealm MainRealm
        {
            get { return IExecute<Org.Codehaus.Plexus.Classworlds.Realm.ClassRealm>("getMainRealm"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.codehaus.plexus/plexus-classworlds/2.8.0/org/codehaus/plexus/classworlds/launcher/Launcher.html#getMainRealmName()"/> 
        /// </summary>
        public Java.Lang.String MainRealmName
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getMainRealmName", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.codehaus.plexus/plexus-classworlds/2.8.0/org/codehaus/plexus/classworlds/launcher/Launcher.html#getSystemClassLoader()"/> <see href="https://www.javadoc.io/doc/org.codehaus.plexus/plexus-classworlds/2.8.0/org/codehaus/plexus/classworlds/launcher/Launcher.html#setSystemClassLoader(java.lang.ClassLoader)"/>
        /// </summary>
        public Java.Lang.ClassLoader SystemClassLoader
        {
            get { return IExecuteWithSignature<Java.Lang.ClassLoader>("getSystemClassLoader", "()Ljava/lang/ClassLoader;"); } set { IExecuteWithSignature("setSystemClassLoader", "(Ljava/lang/ClassLoader;)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.codehaus.plexus/plexus-classworlds/2.8.0/org/codehaus/plexus/classworlds/launcher/Launcher.html#getWorld()"/> <see href="https://www.javadoc.io/doc/org.codehaus.plexus/plexus-classworlds/2.8.0/org/codehaus/plexus/classworlds/launcher/Launcher.html#setWorld(org.codehaus.plexus.classworlds.ClassWorld)"/>
        /// </summary>
        public Org.Codehaus.Plexus.Classworlds.ClassWorld World
        {
            get { return IExecute<Org.Codehaus.Plexus.Classworlds.ClassWorld>("getWorld"); } set { IExecute("setWorld", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.codehaus.plexus/plexus-classworlds/2.8.0/org/codehaus/plexus/classworlds/launcher/Launcher.html#configure(java.io.InputStream)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.InputStream"/></param>
        /// <exception cref="Java.Io.IOException"/>
        /// <exception cref="Org.Codehaus.Plexus.Classworlds.Launcher.ConfigurationException"/>
        /// <exception cref="Org.Codehaus.Plexus.Classworlds.Realm.DuplicateRealmException"/>
        /// <exception cref="Org.Codehaus.Plexus.Classworlds.Realm.NoSuchRealmException"/>
        public void Configure(Java.Io.InputStream arg0)
        {
            IExecute("configure", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.codehaus.plexus/plexus-classworlds/2.8.0/org/codehaus/plexus/classworlds/launcher/Launcher.html#launch(java.lang.String[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <exception cref="Java.Lang.ClassNotFoundException"/>
        /// <exception cref="Java.Lang.IllegalAccessException"/>
        /// <exception cref="Java.Lang.Reflect.InvocationTargetException"/>
        /// <exception cref="Java.Lang.NoSuchMethodException"/>
        /// <exception cref="Org.Codehaus.Plexus.Classworlds.Realm.NoSuchRealmException"/>
        public void Launch(Java.Lang.String[] arg0)
        {
            IExecute("launch", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.codehaus.plexus/plexus-classworlds/2.8.0/org/codehaus/plexus/classworlds/launcher/Launcher.html#setAppMain(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        public void SetAppMain(Java.Lang.String arg0, Java.Lang.String arg1)
        {
            IExecuteWithSignature("setAppMain", "(Ljava/lang/String;Ljava/lang/String;)V", arg0, arg1);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}