/*
*  Copyright (c) 2024-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.1.0)
*  using plexus-classworlds-2.9.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Codehaus.Plexus.Classworlds.Strategy
{
    #region StrategyFactory declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.codehaus.plexus/plexus-classworlds/2.8.0/org/codehaus/plexus/classworlds/strategy/StrategyFactory.html"/>
    /// </summary>
    public partial class StrategyFactory : MASES.JCOBridge.C2JBridge.JVMBridgeBase<StrategyFactory>
    {
        const string _bridgeClassName = "org.codehaus.plexus.classworlds.strategy.StrategyFactory";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public StrategyFactory() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public StrategyFactory(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region StrategyFactory implementation
    public partial class StrategyFactory
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.codehaus.plexus/plexus-classworlds/2.8.0/org/codehaus/plexus/classworlds/strategy/StrategyFactory.html#getStrategy(org.codehaus.plexus.classworlds.realm.ClassRealm,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Codehaus.Plexus.Classworlds.Realm.ClassRealm"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Org.Codehaus.Plexus.Classworlds.Strategy.Strategy"/></returns>
        public static Org.Codehaus.Plexus.Classworlds.Strategy.Strategy GetStrategy(Org.Codehaus.Plexus.Classworlds.Realm.ClassRealm arg0, Java.Lang.String arg1)
        {
            return SExecute<Org.Codehaus.Plexus.Classworlds.Strategy.Strategy>(LocalBridgeClazz, "getStrategy", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.codehaus.plexus/plexus-classworlds/2.8.0/org/codehaus/plexus/classworlds/strategy/StrategyFactory.html#getStrategy(org.codehaus.plexus.classworlds.realm.ClassRealm)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Codehaus.Plexus.Classworlds.Realm.ClassRealm"/></param>
        /// <returns><see cref="Org.Codehaus.Plexus.Classworlds.Strategy.Strategy"/></returns>
        public static Org.Codehaus.Plexus.Classworlds.Strategy.Strategy GetStrategy(Org.Codehaus.Plexus.Classworlds.Realm.ClassRealm arg0)
        {
            return SExecute<Org.Codehaus.Plexus.Classworlds.Strategy.Strategy>(LocalBridgeClazz, "getStrategy", arg0);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}