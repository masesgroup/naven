/*
*  Copyright 2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.12.0)
*  using maven-embedder-3.9.9.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Maven.Cli
{
    #region CLIManager declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.9/org/apache/maven/cli/CLIManager.html"/>
    /// </summary>
    public partial class CLIManager : MASES.JCOBridge.C2JBridge.JVMBridgeBase<CLIManager>
    {
        const string _bridgeClassName = "org.apache.maven.cli.CLIManager";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public CLIManager() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public CLIManager(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region CLIManager implementation
    public partial class CLIManager
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.9/org/apache/maven/cli/CLIManager.html#ACTIVATE_PROFILES"/>
        /// </summary>
        public static char ACTIVATE_PROFILES { get { if (!_ACTIVATE_PROFILESReady) { _ACTIVATE_PROFILESContent = SGetField<char>(LocalBridgeClazz, "ACTIVATE_PROFILES"); _ACTIVATE_PROFILESReady = true; } return _ACTIVATE_PROFILESContent; } }
        private static char _ACTIVATE_PROFILESContent = default;
        private static bool _ACTIVATE_PROFILESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.9/org/apache/maven/cli/CLIManager.html#ALTERNATE_POM_FILE"/>
        /// </summary>
        public static char ALTERNATE_POM_FILE { get { if (!_ALTERNATE_POM_FILEReady) { _ALTERNATE_POM_FILEContent = SGetField<char>(LocalBridgeClazz, "ALTERNATE_POM_FILE"); _ALTERNATE_POM_FILEReady = true; } return _ALTERNATE_POM_FILEContent; } }
        private static char _ALTERNATE_POM_FILEContent = default;
        private static bool _ALTERNATE_POM_FILEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.9/org/apache/maven/cli/CLIManager.html#ALTERNATE_USER_SETTINGS"/>
        /// </summary>
        public static char ALTERNATE_USER_SETTINGS { get { if (!_ALTERNATE_USER_SETTINGSReady) { _ALTERNATE_USER_SETTINGSContent = SGetField<char>(LocalBridgeClazz, "ALTERNATE_USER_SETTINGS"); _ALTERNATE_USER_SETTINGSReady = true; } return _ALTERNATE_USER_SETTINGSContent; } }
        private static char _ALTERNATE_USER_SETTINGSContent = default;
        private static bool _ALTERNATE_USER_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.9/org/apache/maven/cli/CLIManager.html#ALTERNATE_USER_TOOLCHAINS"/>
        /// </summary>
        public static char ALTERNATE_USER_TOOLCHAINS { get { if (!_ALTERNATE_USER_TOOLCHAINSReady) { _ALTERNATE_USER_TOOLCHAINSContent = SGetField<char>(LocalBridgeClazz, "ALTERNATE_USER_TOOLCHAINS"); _ALTERNATE_USER_TOOLCHAINSReady = true; } return _ALTERNATE_USER_TOOLCHAINSContent; } }
        private static char _ALTERNATE_USER_TOOLCHAINSContent = default;
        private static bool _ALTERNATE_USER_TOOLCHAINSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.9/org/apache/maven/cli/CLIManager.html#BATCH_MODE"/>
        /// </summary>
        public static char BATCH_MODE { get { if (!_BATCH_MODEReady) { _BATCH_MODEContent = SGetField<char>(LocalBridgeClazz, "BATCH_MODE"); _BATCH_MODEReady = true; } return _BATCH_MODEContent; } }
        private static char _BATCH_MODEContent = default;
        private static bool _BATCH_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.9/org/apache/maven/cli/CLIManager.html#CHECKSUM_FAILURE_POLICY"/>
        /// </summary>
        public static char CHECKSUM_FAILURE_POLICY { get { if (!_CHECKSUM_FAILURE_POLICYReady) { _CHECKSUM_FAILURE_POLICYContent = SGetField<char>(LocalBridgeClazz, "CHECKSUM_FAILURE_POLICY"); _CHECKSUM_FAILURE_POLICYReady = true; } return _CHECKSUM_FAILURE_POLICYContent; } }
        private static char _CHECKSUM_FAILURE_POLICYContent = default;
        private static bool _CHECKSUM_FAILURE_POLICYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.9/org/apache/maven/cli/CLIManager.html#CHECKSUM_WARNING_POLICY"/>
        /// </summary>
        public static char CHECKSUM_WARNING_POLICY { get { if (!_CHECKSUM_WARNING_POLICYReady) { _CHECKSUM_WARNING_POLICYContent = SGetField<char>(LocalBridgeClazz, "CHECKSUM_WARNING_POLICY"); _CHECKSUM_WARNING_POLICYReady = true; } return _CHECKSUM_WARNING_POLICYContent; } }
        private static char _CHECKSUM_WARNING_POLICYContent = default;
        private static bool _CHECKSUM_WARNING_POLICYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.9/org/apache/maven/cli/CLIManager.html#DEBUG"/>
        /// </summary>
        public static char DEBUG { get { if (!_DEBUGReady) { _DEBUGContent = SGetField<char>(LocalBridgeClazz, "DEBUG"); _DEBUGReady = true; } return _DEBUGContent; } }
        private static char _DEBUGContent = default;
        private static bool _DEBUGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.9/org/apache/maven/cli/CLIManager.html#ERRORS"/>
        /// </summary>
        public static char ERRORS { get { if (!_ERRORSReady) { _ERRORSContent = SGetField<char>(LocalBridgeClazz, "ERRORS"); _ERRORSReady = true; } return _ERRORSContent; } }
        private static char _ERRORSContent = default;
        private static bool _ERRORSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.9/org/apache/maven/cli/CLIManager.html#HELP"/>
        /// </summary>
        public static char HELP { get { if (!_HELPReady) { _HELPContent = SGetField<char>(LocalBridgeClazz, "HELP"); _HELPReady = true; } return _HELPContent; } }
        private static char _HELPContent = default;
        private static bool _HELPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.9/org/apache/maven/cli/CLIManager.html#NON_RECURSIVE"/>
        /// </summary>
        public static char NON_RECURSIVE { get { if (!_NON_RECURSIVEReady) { _NON_RECURSIVEContent = SGetField<char>(LocalBridgeClazz, "NON_RECURSIVE"); _NON_RECURSIVEReady = true; } return _NON_RECURSIVEContent; } }
        private static char _NON_RECURSIVEContent = default;
        private static bool _NON_RECURSIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.9/org/apache/maven/cli/CLIManager.html#OFFLINE"/>
        /// </summary>
        public static char OFFLINE { get { if (!_OFFLINEReady) { _OFFLINEContent = SGetField<char>(LocalBridgeClazz, "OFFLINE"); _OFFLINEReady = true; } return _OFFLINEContent; } }
        private static char _OFFLINEContent = default;
        private static bool _OFFLINEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.9/org/apache/maven/cli/CLIManager.html#QUIET"/>
        /// </summary>
        public static char QUIET { get { if (!_QUIETReady) { _QUIETContent = SGetField<char>(LocalBridgeClazz, "QUIET"); _QUIETReady = true; } return _QUIETContent; } }
        private static char _QUIETContent = default;
        private static bool _QUIETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.9/org/apache/maven/cli/CLIManager.html#SET_USER_PROPERTY"/>
        /// </summary>
        public static char SET_USER_PROPERTY { get { if (!_SET_USER_PROPERTYReady) { _SET_USER_PROPERTYContent = SGetField<char>(LocalBridgeClazz, "SET_USER_PROPERTY"); _SET_USER_PROPERTYReady = true; } return _SET_USER_PROPERTYContent; } }
        private static char _SET_USER_PROPERTYContent = default;
        private static bool _SET_USER_PROPERTYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.9/org/apache/maven/cli/CLIManager.html#SHOW_VERSION"/>
        /// </summary>
        public static char SHOW_VERSION { get { if (!_SHOW_VERSIONReady) { _SHOW_VERSIONContent = SGetField<char>(LocalBridgeClazz, "SHOW_VERSION"); _SHOW_VERSIONReady = true; } return _SHOW_VERSIONContent; } }
        private static char _SHOW_VERSIONContent = default;
        private static bool _SHOW_VERSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.9/org/apache/maven/cli/CLIManager.html#UPDATE_SNAPSHOTS"/>
        /// </summary>
        public static char UPDATE_SNAPSHOTS { get { if (!_UPDATE_SNAPSHOTSReady) { _UPDATE_SNAPSHOTSContent = SGetField<char>(LocalBridgeClazz, "UPDATE_SNAPSHOTS"); _UPDATE_SNAPSHOTSReady = true; } return _UPDATE_SNAPSHOTSContent; } }
        private static char _UPDATE_SNAPSHOTSContent = default;
        private static bool _UPDATE_SNAPSHOTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.9/org/apache/maven/cli/CLIManager.html#VERSION"/>
        /// </summary>
        public static char VERSION { get { if (!_VERSIONReady) { _VERSIONContent = SGetField<char>(LocalBridgeClazz, "VERSION"); _VERSIONReady = true; } return _VERSIONContent; } }
        private static char _VERSIONContent = default;
        private static bool _VERSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.9/org/apache/maven/cli/CLIManager.html#ALSO_MAKE"/>
        /// </summary>
        public static Java.Lang.String ALSO_MAKE { get { if (!_ALSO_MAKEReady) { _ALSO_MAKEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ALSO_MAKE"); _ALSO_MAKEReady = true; } return _ALSO_MAKEContent; } }
        private static Java.Lang.String _ALSO_MAKEContent = default;
        private static bool _ALSO_MAKEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.9/org/apache/maven/cli/CLIManager.html#ALSO_MAKE_DEPENDENTS"/>
        /// </summary>
        public static Java.Lang.String ALSO_MAKE_DEPENDENTS { get { if (!_ALSO_MAKE_DEPENDENTSReady) { _ALSO_MAKE_DEPENDENTSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ALSO_MAKE_DEPENDENTS"); _ALSO_MAKE_DEPENDENTSReady = true; } return _ALSO_MAKE_DEPENDENTSContent; } }
        private static Java.Lang.String _ALSO_MAKE_DEPENDENTSContent = default;
        private static bool _ALSO_MAKE_DEPENDENTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.9/org/apache/maven/cli/CLIManager.html#ALTERNATE_GLOBAL_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ALTERNATE_GLOBAL_SETTINGS { get { if (!_ALTERNATE_GLOBAL_SETTINGSReady) { _ALTERNATE_GLOBAL_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ALTERNATE_GLOBAL_SETTINGS"); _ALTERNATE_GLOBAL_SETTINGSReady = true; } return _ALTERNATE_GLOBAL_SETTINGSContent; } }
        private static Java.Lang.String _ALTERNATE_GLOBAL_SETTINGSContent = default;
        private static bool _ALTERNATE_GLOBAL_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.9/org/apache/maven/cli/CLIManager.html#ALTERNATE_GLOBAL_TOOLCHAINS"/>
        /// </summary>
        public static Java.Lang.String ALTERNATE_GLOBAL_TOOLCHAINS { get { if (!_ALTERNATE_GLOBAL_TOOLCHAINSReady) { _ALTERNATE_GLOBAL_TOOLCHAINSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ALTERNATE_GLOBAL_TOOLCHAINS"); _ALTERNATE_GLOBAL_TOOLCHAINSReady = true; } return _ALTERNATE_GLOBAL_TOOLCHAINSContent; } }
        private static Java.Lang.String _ALTERNATE_GLOBAL_TOOLCHAINSContent = default;
        private static bool _ALTERNATE_GLOBAL_TOOLCHAINSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.9/org/apache/maven/cli/CLIManager.html#BUILDER"/>
        /// </summary>
        public static Java.Lang.String BUILDER { get { if (!_BUILDERReady) { _BUILDERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BUILDER"); _BUILDERReady = true; } return _BUILDERContent; } }
        private static Java.Lang.String _BUILDERContent = default;
        private static bool _BUILDERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.9/org/apache/maven/cli/CLIManager.html#COLOR"/>
        /// </summary>
        public static Java.Lang.String COLOR { get { if (!_COLORReady) { _COLORContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "COLOR"); _COLORReady = true; } return _COLORContent; } }
        private static Java.Lang.String _COLORContent = default;
        private static bool _COLORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.9/org/apache/maven/cli/CLIManager.html#ENCRYPT_MASTER_PASSWORD"/>
        /// </summary>
        public static Java.Lang.String ENCRYPT_MASTER_PASSWORD { get { if (!_ENCRYPT_MASTER_PASSWORDReady) { _ENCRYPT_MASTER_PASSWORDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ENCRYPT_MASTER_PASSWORD"); _ENCRYPT_MASTER_PASSWORDReady = true; } return _ENCRYPT_MASTER_PASSWORDContent; } }
        private static Java.Lang.String _ENCRYPT_MASTER_PASSWORDContent = default;
        private static bool _ENCRYPT_MASTER_PASSWORDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.9/org/apache/maven/cli/CLIManager.html#ENCRYPT_PASSWORD"/>
        /// </summary>
        public static Java.Lang.String ENCRYPT_PASSWORD { get { if (!_ENCRYPT_PASSWORDReady) { _ENCRYPT_PASSWORDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ENCRYPT_PASSWORD"); _ENCRYPT_PASSWORDReady = true; } return _ENCRYPT_PASSWORDContent; } }
        private static Java.Lang.String _ENCRYPT_PASSWORDContent = default;
        private static bool _ENCRYPT_PASSWORDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.9/org/apache/maven/cli/CLIManager.html#FAIL_AT_END"/>
        /// </summary>
        public static Java.Lang.String FAIL_AT_END { get { if (!_FAIL_AT_ENDReady) { _FAIL_AT_ENDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FAIL_AT_END"); _FAIL_AT_ENDReady = true; } return _FAIL_AT_ENDContent; } }
        private static Java.Lang.String _FAIL_AT_ENDContent = default;
        private static bool _FAIL_AT_ENDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.9/org/apache/maven/cli/CLIManager.html#FAIL_FAST"/>
        /// </summary>
        public static Java.Lang.String FAIL_FAST { get { if (!_FAIL_FASTReady) { _FAIL_FASTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FAIL_FAST"); _FAIL_FASTReady = true; } return _FAIL_FASTContent; } }
        private static Java.Lang.String _FAIL_FASTContent = default;
        private static bool _FAIL_FASTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.9/org/apache/maven/cli/CLIManager.html#FAIL_NEVER"/>
        /// </summary>
        public static Java.Lang.String FAIL_NEVER { get { if (!_FAIL_NEVERReady) { _FAIL_NEVERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FAIL_NEVER"); _FAIL_NEVERReady = true; } return _FAIL_NEVERContent; } }
        private static Java.Lang.String _FAIL_NEVERContent = default;
        private static bool _FAIL_NEVERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.9/org/apache/maven/cli/CLIManager.html#IGNORE_TRANSITIVE_REPOSITORIES"/>
        /// </summary>
        public static Java.Lang.String IGNORE_TRANSITIVE_REPOSITORIES { get { if (!_IGNORE_TRANSITIVE_REPOSITORIESReady) { _IGNORE_TRANSITIVE_REPOSITORIESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "IGNORE_TRANSITIVE_REPOSITORIES"); _IGNORE_TRANSITIVE_REPOSITORIESReady = true; } return _IGNORE_TRANSITIVE_REPOSITORIESContent; } }
        private static Java.Lang.String _IGNORE_TRANSITIVE_REPOSITORIESContent = default;
        private static bool _IGNORE_TRANSITIVE_REPOSITORIESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.9/org/apache/maven/cli/CLIManager.html#LOG_FILE"/>
        /// </summary>
        public static Java.Lang.String LOG_FILE { get { if (!_LOG_FILEReady) { _LOG_FILEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "LOG_FILE"); _LOG_FILEReady = true; } return _LOG_FILEContent; } }
        private static Java.Lang.String _LOG_FILEContent = default;
        private static bool _LOG_FILEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.9/org/apache/maven/cli/CLIManager.html#NO_TRANSFER_PROGRESS"/>
        /// </summary>
        public static Java.Lang.String NO_TRANSFER_PROGRESS { get { if (!_NO_TRANSFER_PROGRESSReady) { _NO_TRANSFER_PROGRESSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NO_TRANSFER_PROGRESS"); _NO_TRANSFER_PROGRESSReady = true; } return _NO_TRANSFER_PROGRESSContent; } }
        private static Java.Lang.String _NO_TRANSFER_PROGRESSContent = default;
        private static bool _NO_TRANSFER_PROGRESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.9/org/apache/maven/cli/CLIManager.html#PROJECT_LIST"/>
        /// </summary>
        public static Java.Lang.String PROJECT_LIST { get { if (!_PROJECT_LISTReady) { _PROJECT_LISTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PROJECT_LIST"); _PROJECT_LISTReady = true; } return _PROJECT_LISTContent; } }
        private static Java.Lang.String _PROJECT_LISTContent = default;
        private static bool _PROJECT_LISTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.9/org/apache/maven/cli/CLIManager.html#RESUME_FROM"/>
        /// </summary>
        public static Java.Lang.String RESUME_FROM { get { if (!_RESUME_FROMReady) { _RESUME_FROMContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RESUME_FROM"); _RESUME_FROMReady = true; } return _RESUME_FROMContent; } }
        private static Java.Lang.String _RESUME_FROMContent = default;
        private static bool _RESUME_FROMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.9/org/apache/maven/cli/CLIManager.html#SUPRESS_SNAPSHOT_UPDATES"/>
        /// </summary>
        public static Java.Lang.String SUPRESS_SNAPSHOT_UPDATES { get { if (!_SUPRESS_SNAPSHOT_UPDATESReady) { _SUPRESS_SNAPSHOT_UPDATESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SUPRESS_SNAPSHOT_UPDATES"); _SUPRESS_SNAPSHOT_UPDATESReady = true; } return _SUPRESS_SNAPSHOT_UPDATESContent; } }
        private static Java.Lang.String _SUPRESS_SNAPSHOT_UPDATESContent = default;
        private static bool _SUPRESS_SNAPSHOT_UPDATESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.9/org/apache/maven/cli/CLIManager.html#THREADS"/>
        /// </summary>
        public static Java.Lang.String THREADS { get { if (!_THREADSReady) { _THREADSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "THREADS"); _THREADSReady = true; } return _THREADSContent; } }
        private static Java.Lang.String _THREADSContent = default;
        private static bool _THREADSReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.9/org/apache/maven/cli/CLIManager.html#displayHelp(java.io.PrintStream)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.PrintStream"/></param>
        public void DisplayHelp(Java.Io.PrintStream arg0)
        {
            IExecuteWithSignature("displayHelp", "(Ljava/io/PrintStream;)V", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}