/*
*  Copyright (c) 2024-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.4.0)
*  using maven-embedder-3.9.11.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Maven.Cli.Internal.Extension.Model.Io.Xpp3
{
    #region CoreExtensionsXpp3Reader declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.11/org/apache/maven/cli/internal/extension/model/io/xpp3/CoreExtensionsXpp3Reader.html"/>
    /// </summary>
    public partial class CoreExtensionsXpp3Reader : MASES.JCOBridge.C2JBridge.JVMBridgeBase<CoreExtensionsXpp3Reader>
    {
        const string _bridgeClassName = "org.apache.maven.cli.internal.extension.model.io.xpp3.CoreExtensionsXpp3Reader";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public CoreExtensionsXpp3Reader() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public CoreExtensionsXpp3Reader(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public CoreExtensionsXpp3Reader(params object[] args) : base(args) { }

        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region ContentTransformer declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.11/org/apache/maven/cli/internal/extension/model/io/xpp3/CoreExtensionsXpp3Reader.ContentTransformer.html"/>
        /// </summary>
        public partial class ContentTransformer : MASES.JCOBridge.C2JBridge.JVMBridgeBase<ContentTransformer>
        {
            const string _bridgeClassName = "org.apache.maven.cli.internal.extension.model.io.xpp3.CoreExtensionsXpp3Reader$ContentTransformer";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("ContentTransformer class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public ContentTransformer() { }
            /// <summary>
            /// Internal constructor: used internally from JCOBridge
            /// </summary>
            [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public ContentTransformer(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("ContentTransformer class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public ContentTransformer(params object[] args) : base(args) { }

            private static readonly global::System.Exception _LocalBridgeClazzException = null;
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <inheritdoc/>
            public override string BridgeClassName => _bridgeClassName;
            /// <inheritdoc/>
            public override bool IsBridgeAbstract => true;
            /// <inheritdoc/>
            public override bool IsBridgeCloseable => false;
            /// <inheritdoc/>
            public override bool IsBridgeInterface => true;
            /// <inheritdoc/>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region CoreExtensionsXpp3Reader implementation
    public partial class CoreExtensionsXpp3Reader
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.11/org/apache/maven/cli/internal/extension/model/io/xpp3/CoreExtensionsXpp3Reader.html#%3Cinit%3E(org.apache.maven.cli.internal.extension.model.io.xpp3.CoreExtensionsXpp3Reader.ContentTransformer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Maven.Cli.Internal.Extension.Model.Io.Xpp3.CoreExtensionsXpp3Reader.ContentTransformer"/></param>
        public CoreExtensionsXpp3Reader(Org.Apache.Maven.Cli.Internal.Extension.Model.Io.Xpp3.CoreExtensionsXpp3Reader.ContentTransformer arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.11/org/apache/maven/cli/internal/extension/model/io/xpp3/CoreExtensionsXpp3Reader.html#contentTransformer"/>
        /// </summary>
        public Org.Apache.Maven.Cli.Internal.Extension.Model.Io.Xpp3.CoreExtensionsXpp3Reader.ContentTransformer contentTransformer { get { if (!_contentTransformerReady) { _contentTransformerContent = IGetField<Org.Apache.Maven.Cli.Internal.Extension.Model.Io.Xpp3.CoreExtensionsXpp3Reader.ContentTransformer>("contentTransformer"); _contentTransformerReady = true; } return _contentTransformerContent; } }
        private Org.Apache.Maven.Cli.Internal.Extension.Model.Io.Xpp3.CoreExtensionsXpp3Reader.ContentTransformer _contentTransformerContent = default;
        private bool _contentTransformerReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.11/org/apache/maven/cli/internal/extension/model/io/xpp3/CoreExtensionsXpp3Reader.html#getAddDefaultEntities()"/> <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.11/org/apache/maven/cli/internal/extension/model/io/xpp3/CoreExtensionsXpp3Reader.html#setAddDefaultEntities(boolean)"/>
        /// </summary>
        public bool AddDefaultEntities
        {
            get { return IExecuteWithSignature<bool>("getAddDefaultEntities", "()Z"); } set { IExecuteWithSignature("setAddDefaultEntities", "(Z)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.11/org/apache/maven/cli/internal/extension/model/io/xpp3/CoreExtensionsXpp3Reader.html#read(java.io.InputStream,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.InputStream"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <returns><see cref="Org.Apache.Maven.Cli.Internal.Extension.Model.CoreExtensions"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        /// <exception cref="Org.Codehaus.Plexus.Util.Xml.Pull.XmlPullParserException"/>
        public Org.Apache.Maven.Cli.Internal.Extension.Model.CoreExtensions Read(Java.Io.InputStream arg0, bool arg1)
        {
            return IExecuteWithSignature<Org.Apache.Maven.Cli.Internal.Extension.Model.CoreExtensions>("read", "(Ljava/io/InputStream;Z)Lorg/apache/maven/cli/internal/extension/model/CoreExtensions;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.11/org/apache/maven/cli/internal/extension/model/io/xpp3/CoreExtensionsXpp3Reader.html#read(java.io.InputStream)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.InputStream"/></param>
        /// <returns><see cref="Org.Apache.Maven.Cli.Internal.Extension.Model.CoreExtensions"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        /// <exception cref="Org.Codehaus.Plexus.Util.Xml.Pull.XmlPullParserException"/>
        public Org.Apache.Maven.Cli.Internal.Extension.Model.CoreExtensions Read(Java.Io.InputStream arg0)
        {
            return IExecuteWithSignature<Org.Apache.Maven.Cli.Internal.Extension.Model.CoreExtensions>("read", "(Ljava/io/InputStream;)Lorg/apache/maven/cli/internal/extension/model/CoreExtensions;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.11/org/apache/maven/cli/internal/extension/model/io/xpp3/CoreExtensionsXpp3Reader.html#read(java.io.Reader,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.Reader"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <returns><see cref="Org.Apache.Maven.Cli.Internal.Extension.Model.CoreExtensions"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        /// <exception cref="Org.Codehaus.Plexus.Util.Xml.Pull.XmlPullParserException"/>
        public Org.Apache.Maven.Cli.Internal.Extension.Model.CoreExtensions Read(Java.Io.Reader arg0, bool arg1)
        {
            return IExecuteWithSignature<Org.Apache.Maven.Cli.Internal.Extension.Model.CoreExtensions>("read", "(Ljava/io/Reader;Z)Lorg/apache/maven/cli/internal/extension/model/CoreExtensions;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.11/org/apache/maven/cli/internal/extension/model/io/xpp3/CoreExtensionsXpp3Reader.html#read(java.io.Reader)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.Reader"/></param>
        /// <returns><see cref="Org.Apache.Maven.Cli.Internal.Extension.Model.CoreExtensions"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        /// <exception cref="Org.Codehaus.Plexus.Util.Xml.Pull.XmlPullParserException"/>
        public Org.Apache.Maven.Cli.Internal.Extension.Model.CoreExtensions Read(Java.Io.Reader arg0)
        {
            return IExecuteWithSignature<Org.Apache.Maven.Cli.Internal.Extension.Model.CoreExtensions>("read", "(Ljava/io/Reader;)Lorg/apache/maven/cli/internal/extension/model/CoreExtensions;", arg0);
        }

        #endregion

        #region Nested classes
        #region ContentTransformer implementation
        public partial class ContentTransformer
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.11/org/apache/maven/cli/internal/extension/model/io/xpp3/CoreExtensionsXpp3Reader.ContentTransformer.html#transform(java.lang.String,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String Transform(Java.Lang.String arg0, Java.Lang.String arg1)
            {
                return IExecuteWithSignature<Java.Lang.String>("transform", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}