/*
*  Copyright (c) 2024-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.1.0)
*  using maven-embedder-3.9.11.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Maven.Cli.Internal.Extension.Model
{
    #region CoreExtensions declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.11/org/apache/maven/cli/internal/extension/model/CoreExtensions.html"/>
    /// </summary>
    public partial class CoreExtensions : Java.Io.Serializable
    {
        const string _bridgeClassName = "org.apache.maven.cli.internal.extension.model.CoreExtensions";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public CoreExtensions() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public CoreExtensions(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region CoreExtensions implementation
    public partial class CoreExtensions
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.11/org/apache/maven/cli/internal/extension/model/CoreExtensions.html#getExtensions()"/> <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.11/org/apache/maven/cli/internal/extension/model/CoreExtensions.html#setExtensions(java.util.List)"/>
        /// </summary>
        public Java.Util.List<Org.Apache.Maven.Cli.Internal.Extension.Model.CoreExtension> Extensions
        {
            get { return IExecuteWithSignature<Java.Util.List<Org.Apache.Maven.Cli.Internal.Extension.Model.CoreExtension>>("getExtensions", "()Ljava/util/List;"); } set { IExecuteWithSignature("setExtensions", "(Ljava/util/List;)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.11/org/apache/maven/cli/internal/extension/model/CoreExtensions.html#getModelEncoding()"/> <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.11/org/apache/maven/cli/internal/extension/model/CoreExtensions.html#setModelEncoding(java.lang.String)"/>
        /// </summary>
        public Java.Lang.String ModelEncoding
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getModelEncoding", "()Ljava/lang/String;"); } set { IExecuteWithSignature("setModelEncoding", "(Ljava/lang/String;)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.11/org/apache/maven/cli/internal/extension/model/CoreExtensions.html#addExtension(org.apache.maven.cli.internal.extension.model.CoreExtension)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Maven.Cli.Internal.Extension.Model.CoreExtension"/></param>
        public void AddExtension(Org.Apache.Maven.Cli.Internal.Extension.Model.CoreExtension arg0)
        {
            IExecuteWithSignature("addExtension", "(Lorg/apache/maven/cli/internal/extension/model/CoreExtension;)V", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.maven/maven-embedder/3.9.11/org/apache/maven/cli/internal/extension/model/CoreExtensions.html#removeExtension(org.apache.maven.cli.internal.extension.model.CoreExtension)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Maven.Cli.Internal.Extension.Model.CoreExtension"/></param>
        public void RemoveExtension(Org.Apache.Maven.Cli.Internal.Extension.Model.CoreExtension arg0)
        {
            IExecuteWithSignature("removeExtension", "(Lorg/apache/maven/cli/internal/extension/model/CoreExtension;)V", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}